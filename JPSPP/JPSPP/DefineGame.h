#pragma once

namespace GAME
{
	enum class DIRECTIONS
	{
		DIRECTION_BEGIN = 0
		, STRAIGHT_BEGIN = DIRECTION_BEGIN  //직선 시작

		, TOP = STRAIGHT_BEGIN
		, RIGHT
		, BOTTOM
		, LEFT

		, STRAIGHT_END						//직선 끝
		, DIAGONAL_BEGIN = STRAIGHT_END		//대각선 시작		

		, RIGHTTOP = DIAGONAL_BEGIN
		, LEFTTOP
		, RIGHTBOTTOM
		, LEFTBOTTOM

		, DIAGONAL_END						//대각선 끝
		, DIRECTIONS_END = DIAGONAL_END

		, STRAIGHT_COUNT = STRAIGHT_END - STRAIGHT_BEGIN
		, DIAGONAL_COUNT = DIAGONAL_END - DIAGONAL_BEGIN
		, DIRECTIONS_COUNT = DIRECTIONS_END - DIRECTION_BEGIN
	};

	const std::initializer_list<DIRECTIONS> DIR_LOOKUP_TABLES[static_cast<int>(DIRECTIONS::DIRECTIONS_COUNT)]
	=
	{
		 std::initializer_list<DIRECTIONS>({DIRECTIONS::LEFT, DIRECTIONS::LEFTTOP, DIRECTIONS::TOP, DIRECTIONS::RIGHTTOP, DIRECTIONS::RIGHT })				//TOP
		,std::initializer_list<DIRECTIONS>({DIRECTIONS::TOP, DIRECTIONS::RIGHTTOP, DIRECTIONS::RIGHT, DIRECTIONS::RIGHTBOTTOM, DIRECTIONS::BOTTOM }		)	//RIGHT
		,std::initializer_list<DIRECTIONS>({DIRECTIONS::LEFT, DIRECTIONS::LEFTBOTTOM, DIRECTIONS::BOTTOM, DIRECTIONS::RIGHTBOTTOM, DIRECTIONS::RIGHT })		//BOTTOM
		,std::initializer_list<DIRECTIONS>({DIRECTIONS::LEFT, DIRECTIONS::LEFTTOP, DIRECTIONS::TOP, DIRECTIONS::LEFTBOTTOM, DIRECTIONS::BOTTOM }	)		//LEFT
		,std::initializer_list<DIRECTIONS>({DIRECTIONS::TOP, DIRECTIONS::RIGHTTOP, DIRECTIONS::RIGHT }		)												//RIGHTTOP
		,std::initializer_list<DIRECTIONS>({DIRECTIONS::LEFT, DIRECTIONS::LEFTTOP, DIRECTIONS::TOP }		)												//LEFTTOP
		,std::initializer_list<DIRECTIONS>({DIRECTIONS::BOTTOM, DIRECTIONS::RIGHTBOTTOM, DIRECTIONS::RIGHT })												//RIGHTBOTTOM
		,std::initializer_list<DIRECTIONS>({DIRECTIONS::LEFT, DIRECTIONS::LEFTBOTTOM, DIRECTIONS::BOTTOM })													//LEFTBOTTOM
	};

	//<X,Y>
	enum class DIR_REF_POS_INDEX { X, Y };
	const std::tuple<int, int> DIR_REFERENCE_POS[static_cast<int>(DIRECTIONS::DIRECTIONS_COUNT)]
		=
	{
		 std::make_tuple(0,-1)	//TOP
		,std::make_tuple(1,0)	//RIGHT
		,std::make_tuple(0,1)	//BOTTOM
		,std::make_tuple(-1,0)	//LEFT
		,std::make_tuple(1,-1)	//RIGHTTOP
		,std::make_tuple(-1,-1)	//LEFTTOP
		,std::make_tuple(1,1)	//RIGHTBOTTOM
		,std::make_tuple(-1,1)	//LEFTBOTTOM
	};

	enum class TILE_TYPE
	{
		 EMPTY
		,OBSTACLE
		,INVALID
	};
};